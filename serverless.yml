service: wallet-coin-api
frameworkVersion: '3'

plugins:
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function
  - serverless-domain-manager
  - serverless-associate-waf

custom:
  project: spark
  projectKey: SPK
  region: ap-south-1
  domain:
    dev: dev.withspark.club
    test: test.withspark.club
    prod: api.withspark.club
  customDomain:
    domainName: ${self:custom.domain.${opt:stage}}
    basePath: 'kyc'
    stage: ${opt:stage}
    createRoute53Record: false
  associateWaf:
    name: spark-resources-ACL
    version: V2  

provider:
  name: aws
  runtime: nodejs18.x
  region: ${self:custom.region}
  stackName: ${self:service}-stack
  deploymentBucket:
    name: spark-app-deployment-bucket-${opt:stage}
  stackTags:
    project: ${self:custom.project}
  memorySize: 128
  timeout: 90
  logs:
    frameworkLambda: true
    restApi: true
  tags:
    project: ${self:custom.project}
  architecture: arm64
  environment:
    REGION: ${self:custom.region}
    ADDRESSES_TABLE: Addresses

resources:
  Resources:
    AddressesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Addresses
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: addressId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: addressId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableClass: STANDARD
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}
        Description: Create and Get wallet and coin transactions.

    UserPoolAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: jwt-authorizer-spark
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !ImportValue UserPoolArn
        # The lenght of time(in seconds) that the authorizer results should be cached
        AuthorizerResultTtlInSeconds: 180
        RestApiId: 
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization

functions:
  create-address:
    handler: functions/create-address.createAddress
    name: ${self:service}-create-address
    description: Create a new address for user.
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: '/'
          method: POST
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer          
    iamRoleStatementsName: ${self:service}-createAddress-lambda-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt AddressesTable.Arn
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!node_modules'
        - '!node_modules/@aws-sdk' # Don't need to bundle "@asw-sdk" as Node.js 18 Lambda runtime include SDK v3
        - 'functions/create-address.mjs'
package:
  individually: true
  patterns:
    - '!package-lock.json'
    - '!README.md'
    - '!.gitignore'
    - '!yml'
    - '!.*/**'