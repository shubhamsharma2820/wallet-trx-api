service: wallet-coin-api
frameworkVersion: "3"

plugins:
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function
  - serverless-domain-manager
  - serverless-associate-waf

custom:
  project: spark
  projectKey: SPK
  region: ap-south-1
  domain:
    dev: dev.withspark.club
    test: test.withspark.club
    prod: api.withspark.club
  customDomain:
    domainName: ${self:custom.domain.${opt:stage}}
    basePath: 'wct'
    stage: ${opt:stage}
    createRoute53Record: false
  associateWaf:
    name: spark-resources-ACL
    version: V2

provider:
  name: aws
  runtime: nodejs18.x
  region: ${self:custom.region}
  stackName: ${self:service}-stack
  deploymentBucket:
    name: spark-app-deployment-bucket-${opt:stage}
  stackTags:
    project: ${self:custom.project}
  memorySize: 128
  timeout: 30
  logs:
    frameworkLambda: true
    restApi: true
  tags:
    project: ${self:custom.project}
  architecture: arm64
  environment:
    REGION: ${self:custom.region}

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}
        Description: Create and Get wallet and coin transactions.
        EndpointConfiguration:
          Types:
            - REGIONAL

    UserPoolAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: jwt-authorizer-spark
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !ImportValue UserPoolArn
        # The lenght of time(in seconds) that the authorizer results should be cached
        AuthorizerResultTtlInSeconds: 180
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization

functions:
  create-wallet-transaction:
    handler: functions/wallet/create-wallet-transaction.createWalletTransaction
    name: ${self:service}-create-wallet-transaction
    description: Wallet transaction created in wallet Table.
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "wallet"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/wallet/create-wallet-transaction-schema.json)}
                name: createWalletTransactionSchema
                description: "Validate schema for creating wallet transaction"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-createWalletTransaction-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: !ImportValue WalletTransactionArn
    environment:
      WALLET_TRANSACTION_TABLE: WalletTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/wallet/create-wallet-transaction.mjs"
        - "schemas/wallet/create-wallet-transaction-schema.json"

  get-wallet-transactions:
    handler: functions/wallet/get-wallet-transactions.getWalletTransactions
    name: ${self:service}-user-all-wallet-transactions
    description: Get all wallet transaction of the user.
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "wallet/{userId}"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/wallet/get-wallet-transactions-schema.json)}
                name: getuserwalletTransactionschema
                description: "Validate schema to get all wallet transaction"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-userwalletTransaction-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: !ImportValue WalletTransactionArn
    environment:
      WALLET_TRANSACTION_TABLE: WalletTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/wallet/get-wallet-transactions.mjs"
        - "schemas/wallet/get-wallet-transactions-schema.json"

  get-user-filtered-wallet-transactions:
    handler: functions/wallet/get-user-filtered-wallet-transactions.getUserFilteredWalletTransactions
    name: ${self:service}-get-user-filtered-wallet-transactions
    description: Get user wallet transactions base on reference like gold, cashback etc….
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "filter-wallet/{userId}"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/wallet/get-user-filtered-wallet-transactions-schema.json)}
                name: getUserFilteredWalletTransactionsschema
                description: "Validate schema to get user filtered wallet transaction"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-getUserFilteredWalletTransactions-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: !ImportValue WalletTransactionArn
    environment:
      WALLET_TRANSACTION_TABLE: WalletTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/wallet/get-user-filtered-wallet-transactions.mjs"
        - "schemas/wallet/get-user-filtered-wallet-transactions-schema.json"

  get-all-filtered-wallet-transactions:
    handler: functions/wallet/get-all-filtered-wallet-transactions.getAllFilteredWalletTransactions
    name: ${self:service}-get-all-filtered-wallet-transactions
    description: Get all wallet transactions based on reference type like gold, cashback etc…
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "filter-wallet"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/wallet/get-all-filtered-wallet-transactions-schema.json)}
                name: getAllFilteredWalletTransactionsschemas
                description: "Validate schema to get all filtered wallet transaction"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-getAllFilteredWalletTransactions-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: !ImportValue WalletTransactionArn
    environment:
      WALLET_TRANSACTION_TABLE: WalletTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/wallet/get-all-filtered-wallet-transactions.mjs"
        - "schemas/wallet/get-all-filtered-wallet-transactions-schema.json"

  create-coin-transaction:
    handler: functions/coin/create-coin-transaction.createCoinTransaction
    name: ${self:service}-create-coin-transaction
    description: Coin transaction created in coin Table
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "coin"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/coin/create-coin-transaction-schema.json)}
                name: createCoinTransactionSchema
                description: "Validate schema for creating coin transaction"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-createcoinTransaction-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: !ImportValue CoinTransactionTableArn
    environment:
      COIN_TRANSACTION_TABLE: CoinTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/coin/create-coin-transaction.mjs"
        - 'schemas/coin/create-coin-transaction-schema.json'

  get-coin-transaction:
    handler: functions/coin/get-coin-transactions.getCoinTransactions
    name: ${self:service}-user-all-coin-transaction
    description: Get all coin transaction of the user.
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "coin/{userId}"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/coin/get-coin-transactions-schema.json)}
                name: getUserCoinTransactionSchema
                description: "Validate schema for creating wallet transaction"
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-userAllCoinTransaction-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: !ImportValue CoinTransactionTableArn
    environment:
      COIN_TRANSACTION_TABLE: CoinTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/coin/get-coin-transactions.mjs"
        - 'schemas/coin/get-coin-transactions-schema.json'

  get-user-filtered-coin-transactions:
    handler: functions/coin/get-user-filtered-coin-transactions.getUserFilteredCoinTransactions
    name: ${self:service}-get-user-filtered-coin-transactions
    description: Get user coin transactions base on reference like gold, cashback etc….
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "filter-coin/{userId}" 
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/coin/get-user-filtered-coin-transactions-schema.json)}
                name: getUserFilteredCoinTransactionsSchema
                description: "Validate schema to get user filtered coin transaction."
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-getUserFilteredCoinTransactions-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: !ImportValue CoinTransactionTableArn
    environment:
      COIN_TRANSACTION_TABLE: CoinTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/coin/get-user-filtered-coin-transactions.mjs"
        - 'schemas/coin/get-user-filtered-coin-transactions-schema.json'

  get-all-filtered-coin-transactions:
    handler: functions/coin/get-all-filtered-coin-transactions.getAllFilteredCoinTransactions
    name: ${self:service}-get-all-filtered-coin-transactions
    description: Get all coin transactions based on reference type like gold, cashback etc….
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: "filter-coin"
          method: POST
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/coin/get-all-filtered-coin-transactions-schema.json)}
                name: getAllFilteredCoinTransactionsSchema
                description: "Validate schema to get all filtered coin transaction."
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: UserPoolAuthorizer
    iamRoleStatementsName: ${self:service}-getAllFilteredCoinTransactions-lambda-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: !ImportValue CoinTransactionTableArn
    environment:
      COIN_TRANSACTION_TABLE: CoinTransaction
    package:
      individually: true
      patterns:
        - "!functions/**"
        - "!node_modules"
        - "!node_modules/@aws-sdk"
        - "functions/coin/get-all-filtered-coin-transactions.mjs"
        - 'schemas/coin/get-all-filtered-coin-transactions-schema.json'

package:
  individually: true
  patterns:
    - "!package-lock.json"
    - "!README.md"
    - "!.gitignore"
    - "!yml"
    - "!.*/**"
