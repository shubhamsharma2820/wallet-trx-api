service: wallet-coin-api
frameworkVersion: '3'

plugins:
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function
  # - serverless-domain-manager
  # - serverless-associate-waf

custom:
  project: spark
  projectKey: SPK
  region: ap-south-1
  # domain:
  #   dev: dev.withspark.club
  #   test: test.withspark.club
  #   prod: api.withspark.club
  # customDomain:
  #   domainName: ${self:custom.domain.${opt:stage}}
  #   basePath: 'kyc'
  #   stage: ${opt:stage}
  #   createRoute53Record: false
  associateWaf:
    name: spark-resources-ACL
    version: V2  

provider:
  name: aws
  runtime: nodejs18.x
  region: ${self:custom.region}
  stackName: ${self:service}-stack
  deploymentBucket:
    name: spark-app-deployment-bucket-${opt:stage}
  stackTags:
    project: ${self:custom.project}
  memorySize: 128
  timeout: 90
  logs:
    frameworkLambda: true
    restApi: true
  tags:
    project: ${self:custom.project}
  architecture: arm64
  environment:
    REGION: ${self:custom.region}

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}
        Description: Create and Get wallet and coin transactions.

    # UserPoolAuthorizer:
    #   Type: AWS::ApiGateway::Authorizer
    #   Properties:
    #     Name: jwt-authorizer-spark
    #     Type: COGNITO_USER_POOLS
    #     ProviderARNs:
    #       - !ImportValue UserPoolArn
    #     # The lenght of time(in seconds) that the authorizer results should be cached
    #     AuthorizerResultTtlInSeconds: 180
    #     RestApiId: 
    #       Ref: ApiGatewayRestApi
    #     IdentitySource: method.request.header.Authorization

functions:
  create-wallet-transaction:
    handler: functions/wallet/create-wallet-transaction.createWalletTransaction
    name: ${self:service}-wallet-transaction
    description: Wallet transaction created in wallet Table.
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: 'wallet'
          method: POST
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: UserPoolAuthorizer          
    iamRoleStatementsName: ${self:service}-walletTransaction-lambda-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: !ImportValue WalletTransactionArn
    environment:
      WALLET_TRANSACTION_TABLE: WalletTransaction
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!node_modules'
        - '!node_modules/@aws-sdk' 
        - 'functions/wallet/create-wallet-transaction.mjs'

  get-wallet-transaction:
    handler: functions/wallet/get-wallet-transactions.getWalletTransactions
    name: ${self:service}-userall-wallet-transaction
    description: user all Wallet transaction in wallet Table.
    timeout: 30 #seconds
    memorySize: 128 #mb
    events:
      - http:
          path: 'userwallettransaction/{userId}'
          method: POST
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: UserPoolAuthorizer          
    iamRoleStatementsName: ${self:service}-userwalletTransaction-lambda-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: !ImportValue WalletTransactionArn
    environment:
      WALLET_TRANSACTION_TABLE: WalletTransaction
    package:
      individually: true
      patterns:
        - '!functions/**'
        - '!node_modules'
        - '!node_modules/@aws-sdk' 
        - 'functions/wallet/get-wallet-transactions.mjs'

package:
  individually: true
  patterns:
    - '!package-lock.json'
    - '!README.md'
    - '!.gitignore'
    - '!yml'
    - '!.*/**'